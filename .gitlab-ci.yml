variables:
  IMAGE_TAG: $IMAGE_NAME:latest

image: node:20

before_script:
  - corepack enable

stages:
  - static_analysis
  - unit_test
  - build
  - deploy

lint-app-job:
  stage: static_analysis
  image: node:latest
  rules:
    - changes:
      - app/**/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run on all merges (merges break if no pipeline runs, weird gitlab issue)
  script:
    - cd app
    - pnpm install
    - pnpm run lint --format gitlab
  artifacts:
    reports:
      codequality: gl-codequality.json

lint-strapi-job:
  stage: static_analysis
  rules:
    - changes:
      - strapi/**/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Run on all merges (merges break if no pipeline runs, weird gitlab issue)
  script:
    - cd strapi
    - pnpm install
    - pnpm run lint --format gitlab
  artifacts:
    reports:
      codequality: gl-codequality.json

unit-test-job:
  stage: unit_test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  rules:
    - changes:
      - app/**/*
  script:
    - cd app
    - pnpm install
    - pnpm run test --ci --reporters=default --reporters=jest-junit
  artifacts:
    reports:
      junit: app/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: app/coverage/cobertura-coverage.xml

build-strapi:
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == "prod"
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_SERVER
  script:
    - cd strapi
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

deploy-strapi:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "prod"
  image: alpine:latest
  before_script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
  script:
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p strapi/public/uploads || true"
    - scp -i $ID_RSA -o StrictHostKeyChecking=no ./strapi/docker-compose.yml $SERVER_USER@$SERVER_IP:~/strapi
    - scp -i $ID_RSA -o StrictHostKeyChecking=no $ENV_VARS $SERVER_USER@$SERVER_IP:~/strapi/.env.prod
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_SERVER"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_TAG"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd strapi && docker-compose pull && docker-compose up --detach --force-recreate && docker image prune -f"
  environment:
    name: production
    url: https://mystudentyears.co.uk/strapi/
    on_stop: stop-strapi

stop-strapi:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "prod"
  environment:
    name: production
    action: stop
  when: manual
  script:
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd strapi && docker-compose down && docker image prune -f"
  
